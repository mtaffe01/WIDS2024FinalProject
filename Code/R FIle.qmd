---
title: "testibng"
format: html
editor: visual
---

# useful git commands

**This command will update all the branches on your computer** git remote update origin --prune

showing off branch

test

### Loading Packages

```{r}
library(tidyverse)
```

### Gathering Data

```{r}
# Union Data

union_demographics <- read_rds("../Data/union_demographics.rds")
union_wages <- read_rds("../Data/union_wages.rds")
union_states <- read_rds("../Data/union_states.rds")


# Election Data
house <- read_rds("../Data/house.rds")

# Wage Data
income_distribution <- read_rds("../Data/income_distribution.rds")

# Minimum Wage Data
minimum_wage <- read_csv("../Data/minimum_wage_data.csv")
```


### Cleaning Data

#### Examining data shape

First, lets get an idea of what our data looks like.

```{r}
head(union_demographics)
head(union_wages)
head(union_states)
head(house)
head(income_distribution)
head(minimum_wage)
```

From the head() function we can already see some tidying that needs to be done, mostly in the `house` table. First, to make data analysis easier we will need to combine the `states` and `house` table; this will be done on the year and state columns. however, the state column in the house data set is in uppercase, compared to sentence case in the states table. Next, R has read district in as a string column rather than a numeric column. Examining the data set documentation, this is because 0 is actually "district at large" rather than a district number. This will be taken into account in data analysis.

Next we will look at a quick summary of the data to find very obvious trends.

```{r}
summary(demographics)
```

From the summary, we can see the demographics has most of its variables skewed. This will be examined in closer detail in the exploratory data analysis. only two columns have NA values and each of those columns NA values represent less than 10% of the data. There is not an immediate cause to take action on these NA values, although they will be examined in greater detail in the EDA.

```{r}
summary(wages)
```

The `wages` table has no NA values. There is also nothing in the data documentation that would indicate a numeric value of some kind is being used as an NA value.

```{r}
summary(states)
```

Again, there are no NA values in the States data set, although we do see some significantly skewed data.

```{r}
summary(house)
```

in the house data set, we can see a significant amount of NA values in the runoff column

#### Cleaning data script

From a quick look at the shapes and distribution of the tables, the house table will be modified.

```{r}
house <- house |>
  mutate(state = str_to_sentence(state)) |> # change from all caps to sentence case) 
  select(!(state_fips:office)) |> #Remove unwanted columns
  select(!(stage:candidate)) |> 
  select(!(writein:fusion_ticket))
```

```{r}
union_demographics <- union_demographics |> 
  select(-sample_size) |> 
  mutate(union_type = facet, .keep = "unused")
```

```{r}
union_wages <- union_wages |> 
  select(-sample_size,
         -at_cap) |> 
  mutate(percent_difference = union_wage_premium_raw, .keep = "unused") |> 
  mutate(percent_difference_adjusted = union_wage_premium_adjusted, .keep = "unused") |> 
  mutate(union_type = facet, .keep = "unused")
```

```{r}
union_states <- union_states |> 
  select(-state_census_code,
         -observations)
```

```{r}
income_distribution <- income_distribution |> 
  select(-number) |> 
  select(!ends_with("moe")) |> 
  select(year:income_mean) |> 
  distinct(year, race, income_median, income_mean, .keep_all = TRUE) 
```

```{r}
minimum_wage <- minimum_wage |> 
  select(Year:CPI.Average)
```




#### Combining house and states dataframes

The states data set has five entries for each year for each of the five `sectors`. For this project we will use the `total` sector. A decades column will also be added.

```{r}
test <- minimum_wage
```


```{r}
full_data <- union_states |> 
  filter(sector == "Total") |> 
  left_join(house, by = c("year", "state")) |> 
  filter(party == "DEMOCRAT" | party == "REPUBLICAN") |> 
  mutate(decade = paste0((year - year %% 10), "s"),
         party_binary = ifelse(party == "DEMOCRAT", 0, 1))  |> 
  seelect 
```

### EDA

```{r}
full_data |> 
  ggplot(aes(x = year, y = p_covered, color = regions)) +
  geom_point() +
  geom_smooth()
```

```{r}
full_data |> 
  ggplot(aes(x = party, y = p_members)) +
  geom_boxplot() +
  facet_wrap(vars(decade))
```

```{r}
t.test(p_members ~ party, data = full_data, conf.level = .9)
```

```{r}
full_data_after_2008 <- full_data |> 
  filter(year > 2008)
t.test(p_members ~ party, data = full_data_after_2008, conf.level = .9)
```

## Modeling

```{r}
model <- glm(party_binary ~ p_members, family = "binomial", data = full_data)
summary(model)
```

## Conclusion
