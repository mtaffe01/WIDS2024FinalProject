---
title: "WIDS 2024 Final Project"
author: "Michael Taffe, Melanie Klein, Ramiro Arevalo"
format: html
editor: visual
---

# 1. Comparing interactions between collective bargaining rates, wages, and House of Representative elections

** Insert abstract of project, where we got our data, what our data looks like, and other information here

# 2. Data Analysis 
## 2.1 Getting Set Up

```{r}
suppressPackageStartupMessages(library(tidyverse))
library(usmap) # Used for map plots
```

```{r}
# Union Data: obtained from Tidy Tuesday
union_wages <- read_rds("../Data/union_wages.rds")
union_states <- read_rds("../Data/union_states.rds")

# Election Data: Obtained from Tidy Tuesday
house <- read_rds("../Data/house.rds")

# Wage Data: Obtained from Tidy Tuesday
income_distribution <- read_rds("../Data/income_distribution.rds")

# Minimum Wage Data: Obtained from U.S. Department of Labor
minimum_wage <- read_csv("../Data/minimum_wage_data.csv",show_col_types = FALSE)
```

## 2.2 Basic Data Cleaning
### 2.2.1 Examining data shape

Before we do anything to our data, we will examine our data to ensure everything loaded in correctly 

```{r}
head(union_wages)
head(union_states)
head(house)
head(income_distribution)
head(minimum_wage)
```

From the head() function we can already see some tidying that needs to be done, mostly in the `house` table. First, to make data analysis easier we will need to combine the `states` and `house` table; this will be done on the year and state columns. however, the state column in the house data set is in uppercase, compared to sentence case in the states table. Next, R has read district in as a string column rather than a numeric column. Examining the data set documentation, this is because 0 is actually "district at large" rather than a district number. This will be taken into account in data analysis.

Next we will look at a quick summary of the data to find very obvious trends.

From the summary, we can see the demographics has most of its variables skewed. This will be examined in closer detail in the exploratory data analysis. only two columns have NA values and each of those columns NA values represent less than 10% of the data. There is not an immediate cause to take action on these NA values, although they will be examined in greater detail in the EDA.

```{r}
# look for NAs and skews
summary(union_wages)
```

The `wages` table has no NA values. There is also nothing in the data documentation that would indicate a numeric value of some kind is being used as an NA value.

```{r}
summary(union_states)
```

Again, there are no NA values in the States data set, although we do see some significantly skewed data.

```{r}
summary(house)
```

in the house data set, we can see a significant amount of NA values in the runoff column

### 2.2.2 Cleaning data script

From a quick look at the shapes and distribution of the tables, the house table will be modified.

```{r}
house <- house |>
  group_by(year, state, district) |> # group for next line
  filter(candidatevotes == max(candidatevotes)) |> #only include candidates that won
  ungroup() |> 
  mutate(state = str_to_sentence(state)) |> # change from all caps to sentence case) 
  select(!(state_fips:office)) |> #Remove unwanted columns
  select(!(stage:candidate)) |> 
  select(!(writein:fusion_ticket)) |> 
  rename(state_abbreviation = state_po) |>  # rename state abbreviation column
  mutate(party = case_when(
    str_detect(party, "DEMOCRAT") ~ "DEMOCRAT",
    str_detect(party, "REPUBLICAN") ~ "REUBLICAN",
    str_detect(party, "INDEPENDENT") ~ "INDEPENDENT"
  )) # Recode of party variable
```

```{r}
union_wages <- union_wages |> 
  filter(facet == "all wage and salary workers") |> 
  distinct(year, .keep_all = TRUE) |> 
  select(-sample_size,
         -at_cap) |> 
  mutate(wage_percent_difference = union_wage_premium_raw, .keep = "unused") |> 
  mutate(wage_percent_difference_adjusted = union_wage_premium_adjusted, .keep = "unused") |> 
  mutate(union_type = facet, .keep = "unused")
```

```{r}
union_states <- union_states |> 
  select(-state_census_code,
         -observations) |> # remove unwanted columns
  mutate(employment_count = employment * 1000, .keep = "unused") |> # column measured in 1000s, this fixes it
  mutate(union_employment_count = members * 1000, .keep = "unused") |> 
  mutate(collective_bargain_employment_count = covered * 1000,
         .keep = "unused") |> 
  rename(
    percent_union = p_members,
    percent_collective_bargain = p_covered
  ) #renamed columns
```

```{r}
income_distribution <- income_distribution |> 
  select(-number) |> # removing unwanted columns
  select(!ends_with("moe")) |> 
  select(year:income_mean) |> 
  distinct(year, race, income_median, income_mean, .keep_all = TRUE) |> # only include one line per year. needed bc of multiple sectors that are not being used in data analysis
  rename(median_income = income_median,
         mean_income = income_mean) |> # renaming columns
  filter(race == "All Races") |> 
  select(-race)
```

```{r}
minimum_wage <- minimum_wage |> 
  select(Year:CPI.Average) |> # selecting relevant columns
  rename(year = Year,
         state = State,
         state_min_wage = State.Minimum.Wage,
         state_min_wage_2020_adj = State.Minimum.Wage.2020.Dollars,
         fed_min_wage = Federal.Minimum.Wage,
         fed_min_wage_2020_adj = Federal.Minimum.Wage.2020.Dollars,
         effective_min_wage = Effective.Minimum.Wage,
         effective_min_wage_2020_adj = Effective.Minimum.Wage.2020.Dollars,
         CPI_avg = CPI.Average
  ) |> # renaming variables
  filter(!state %in% c("U.S. Virgin Islands", "Puerto Rico", "Guam")) |>  # remove territory
  mutate(state_abbreviation = 
           ifelse(is.na(state.abb[match(state, state.name)]),
                  "DC",
                  state.abb[match(state, state.name)]),
         .keep = "unused", .after = year) # replaces state with state abbreviation, NA values coded as DC as DC is the only NA value 
```

```{r}
# seeing what we have left
head(union_wages)
head(union_states)
head(house)
head(income_distribution)
head(minimum_wage)
```

```{r}
# seeing what years we have
range(union_wages$year) #ntl
range(union_states$year) # state
range(house$year) # state
range(income_distribution$year) # ntl
range(minimum_wage$year) # state
```

### 2.2.3 Merging dataframes

The states data set has five entries for each year for each of the five `sectors`. For this project we will use the `total` sector. A decades column will also be added.

#### 2.2.3.1 State Dataframes

```{r}
full_state_data <- union_states |> 
  filter(sector == "Total") |> 
  select(-sector,
         -state) |> 
  left_join(house, by = c("year", "state_abbreviation")) |> 
  mutate(decade = paste0((year - year %% 10), "s"),
         party_binary = ifelse(party == "DEMOCRAT", 1, 0)) |> 
  left_join(minimum_wage, by = c("year", "state_abbreviation")) |> 
  group_by(year, state) |> 
  mutate(party_state_average = mean(party_binary)) |>
  ungroup() |> 
  mutate(state = state.name[match(state_abbreviation, state.abb)], # fix state encoding
         regions = state.region[match(state_abbreviation, state.abb)]) # fix region encoding
```

```{r}
state_column_list = c("year", "decade", "state", "state_abbreviation",
                      "regions", "district", "party", "party_binary",
                      "party_state_average",
                      "employment_count", "union_employment_count",
                      "collective_bargain_employment_count", "percent_union",
                      "percent_collective_bargain", "state_min_wage",
                      "state_min_wage_2020_adj", "fed_min_wage",
                      "fed_min_wage_2020_adj", "effective_min_wage",
                      "effective_min_wage_2020_adj", "CPI_avg")
full_state_data <- full_state_data[, state_column_list] # reorder columns
full_state_data$party[is.na(full_state_data$party)] <- "No election" # replace party NAs
full_state_data$district[is.na(full_state_data$district)] <- "No election" # replace district NAs
full_state_data$party_binary[is.na(full_state_data$party_binary)] <- "No election" # replace district NAs
```

```{r}
range(full_state_data$year)
```

```{r}
head(full_state_data)
summary(full_state_data)
```

#### 2.2.3.2 National Dataframes

```{r}
state_to_ntl_adjusted <- full_state_data |>
  mutate(prop_2020_adj = fed_min_wage_2020_adj / fed_min_wage, .after = year) |>
  distinct(year, .keep_all = TRUE) |>
  select(year, prop_2020_adj)
```

```{r}
state_to_ntl_employment <- full_state_data |>
  group_by(year) |>
  summarise_at(vars(employment_count:collective_bargain_employment_count), sum)
```

```{r}
full_ntl_data <- income_distribution |> 
  left_join(union_wages, by = "year") |>
  left_join(state_to_ntl_adjusted, by = "year") |>
  left_join(state_to_ntl_employment, by = "year") |>
  mutate(decade = paste0((year - year %% 10), "s"), .after = year) |>
  mutate(mean_median_income_difference = mean_income - median_income, .after = mean_income) |>
   mutate(median_income_2020_adj = median_income * prop_2020_adj,
         mean_income_2020_adj = mean_income * prop_2020_adj,
         mean_median_income_difference_2020_adj = mean_median_income_difference * prop_2020_adj,
         wage_2020_adj = wage * prop_2020_adj,
         union_wage_2020_adj = union_wage * prop_2020_adj,
         nonunion_wage_2020_adj = nonunion_wage * prop_2020_adj,
         percent_union = union_employment_count / employment_count,
         percent_collective_bargain = collective_bargain_employment_count / employment_count) |> 
  select(-prop_2020_adj)
```

```{r}
ntl_column_list <- c("year", "decade", "mean_income",
                     "mean_income_2020_adj", "median_income",
                     "median_income_2020_adj", "mean_median_income_difference",
                     "mean_median_income_difference_2020_adj", "wage",
                     "wage_2020_adj", "union_wage", "union_wage_2020_adj",
                     "nonunion_wage", "nonunion_wage_2020_adj",
                     "wage_percent_difference", 
                     "wage_percent_difference_adjusted",
                     "employment_count", "union_employment_count", 
                     "collective_bargain_employment_count",
                     "percent_union", "percent_collective_bargain",
                     "union_type")
full_ntl_data <- full_ntl_data[, ntl_column_list] # reorder columns
```

```{r}
rm(house, income_distribution, minimum_wage, state_to_ntl_adjusted,
   state_to_ntl_employment, union_states, union_wages, state_column_list,
   ntl_column_list)
```

```{r}
range(full_ntl_data$year)
```

## 2.3 EDA

For our exploratory data analysis, we will look at interactions between collective bargaining rates, wages, and house election. We will also examine basic distribution 

### 2.3.1 Collective Bargaining

```{r}
per_union_wage_data <- full_state_data |> # This object will be used to create the graph and also in the data subset
  filter(!is.na(regions)) |> #This just removes DC
  filter(year <= 2020 & year >= 1984) |>  #wage data only exists before 2020
  mutate(
    map_color = case_when(
      state_abbreviation == "CA" ~ "CA", # States we would like to highlight. first "" is the state abb, second "" is what will appear in legend
      state_abbreviation == "AK" ~ "AK",
      state_abbreviation == "OK" ~ "OK",
      state_abbreviation == "FL" ~ "FL",
      .default = NA
    )
  ) 
per_union_wage_data |> # use created table here
  ggplot(aes(x = year)) +
  geom_line(aes(y = percent_union, group = state_abbreviation),
            color = "grey75", alpha =0.6) + # using group means the groupings wont appear in legend
  geom_line(data = subset(per_union_wage_data, # use created object here
                          !is.na(map_color)), #subset used to keep out non highlighted states
            aes(y = percent_union, color = map_color),
            linewidth = .75) +
  geom_line(data = subset(full_ntl_data, year >= 1984),
            aes(y = percent_union), color = "orange", linewidth = 1.5) +
  annotate("text", x=1988, y=.15, label= "Federal Avg", color = "orange", size = 5) +
  theme_minimal() +
  scale_x_continuous(breaks = seq(min(per_union_wage_data$year), max(per_union_wage_data$year), by = 4)) + 
  labs(title = "States by % of labor market covered by union",
       x = "Year",
       y = "% of labor market in union")

rm(per_union_wage_data)
```

```{r}
per_collective_wage_data <- full_state_data |> # This object will be used to create the graph and also in the data subset
  filter(!is.na(regions)) |> #This just removes DC
  filter(year <= 2020 & year >= 1984) |>  #wage data only exists before 2020
  mutate(
    map_color = case_when(
      state_abbreviation == "CA" ~ "CA", # States we would like to highlight. first "" is the state abb, second "" is what will appear in legend
      state_abbreviation == "AK" ~ "AK",
      state_abbreviation == "HI" ~ "HI",
      state_abbreviation == "FL" ~ "FL",
      .default = NA
    )
  ) 
per_collective_wage_data |> # use created table here
  ggplot(aes(x = year)) +
  geom_line(aes(y = percent_collective_bargain, group = state_abbreviation),
            color = "grey75", alpha =0.6) + # using group means the groupings wont appear in legend
  geom_line(data = subset(per_collective_wage_data, # use created object here
                          !is.na(map_color)), #subset used to keep out non highlighted states
            aes(y = percent_collective_bargain, color = map_color),
            linewidth = .75) +
  geom_line(data = subset(full_ntl_data, year >= 1984),
            aes(y = percent_collective_bargain), color = "orange", linewidth = 1.5) +
  annotate("text", x=1988, y=.17, label= "Federal Avg", color = "orange", size = 5) +
  theme_minimal() +
  scale_x_continuous(breaks = seq(min(per_collective_wage_data$year), max(per_collective_wage_data$year), by = 4)) + 
  labs(title = "States by % of labor market covered by collective Bargaining Agreement",
       x = "Year",
       y = "% of labor market in union")

rm(per_collective_wage_data)
```



### 2.3.2 Wages

```{r}
state_minimum_wage_data <- full_state_data |> # This object will be used to create the graph and also in the data subset
  filter(!is.na(regions)) |> #This just removes DC
  filter(year <=2020 & year >=1984) |>  #wage data only exists before 2020
  mutate(
    map_color = case_when(
      state_abbreviation == "CA" ~ "CA", # States we would like to highlight. first "" is the state abb, second "" is what will appear in legend
      state_abbreviation == "AK" ~ "AK",
      state_abbreviation == "OK" ~ "OK",
      state_abbreviation == "FL" ~ "FL",
      .default = NA
    )
  ) 
state_minimum_wage_data |> # use created table here
  ggplot(aes(x = year)) +
  geom_line(aes(y = state_min_wage_2020_adj, group = state_abbreviation),
            color = "grey75", alpha =0.6) + # using group means the groupings wont appear in legend
  geom_line(data = subset(state_minimum_wage_data, # use created object here
                          !is.na(map_color)), #subset used to keep out non highlighted states
            aes(y = state_min_wage_2020_adj, color = map_color),
            linewidth = .75) +
  geom_line(aes(y = fed_min_wage), color = "red", linewidth = .75) + # federal minimum wage
  theme_minimal() +
  scale_x_continuous(breaks = seq(min(state_minimum_wage_data$year), max(state_minimum_wage_data$year), by = 4)) + 
  labs(title = "State Minimum Wage by Year (Adjusted for 2020 $)",
       subtitle = "For states with an adjusted effective minimum wage above the federal level",
       x = "Year",
       y = "Minimum wage (2020 USD)")

rm(state_minimum_wage_data) # remove object to make graph
```

```{r}
effective_minimum_wage_data <- full_state_data |> 
  filter(!is.na(regions)) |> 
  filter(effective_min_wage_2020_adj != fed_min_wage_2020_adj) |> 
  filter(year <=2020 & year >=1984) |>
  mutate(
    map_color = case_when(
      state_abbreviation == "CA" ~ "CA",
      state_abbreviation == "AK" ~ "AK",
      state_abbreviation == "CT" ~ "CT",
      state_abbreviation == "HI" ~ "HI",
      .default = NA
    )
  ) 
effective_minimum_wage_data |> 
  ggplot(aes(x = year)) +
  geom_line(aes(y = effective_min_wage_2020_adj, group = state_abbreviation),
            color = "grey75", alpha =0.6) +
  geom_line(data = subset(effective_minimum_wage_data, !is.na(map_color)),
            aes(y = effective_min_wage_2020_adj, color = map_color),
            linewidth = .75) +
  geom_line(aes(y = fed_min_wage), color = "red", linewidth = .75) +
  theme_minimal() +
  scale_x_continuous(breaks = seq(min(effective_minimum_wage_data$year), max(effective_minimum_wage_data$year), by = 4)) + 
  labs(title = "State Effective Minimum Wage by Year (Adjusted for 2020 $)",
       subtitle = "For states with an adjusted effective minimum wage above the federal level",
       x = "Year",
       y = "Effective minimum wage (2020 USD)")

rm(effective_minimum_wage_data)
```
```{r}
full_ntl_data |> 
  filter(year >= 1984) |> 
  ggplot(aes(x = year)) +
  geom_line(aes(y = mean_income_2020_adj), color = "red") +
  geom_line(aes(y = median_income_2020_adj), color = "blue") +
  theme_minimal()
```


### 2.3.3 House Elections

```{r}
map_data <- full_state_data |> 
  select(c("year", "state", "party_state_average")) |> 
  distinct(year, state, .keep_all = TRUE) |> 
  filter(year %% 4==0) |> 
  filter(!is.na(party_state_average))

plot_usmap(data = map_data, values = "party_state_average", color = "black") +
  facet_wrap(~year, nrow = 2, ncol= 6) +
  theme(legend.position = "top") +
  scale_fill_gradient(low = "red", high = "blue")

rm(map_data)
```

### 2.3.4 Collective Bargaining and Wages

```{r}
full_ntl_data |> 
  filter(year >= 1984) |> 
  ggplot(aes(x = year)) +
  geom_line(aes(y = union_wage_2020_adj), color = "blue") +
  geom_line(aes(y = nonunion_wage_2020_adj), color = "red") + 
  theme_minimal()
```

```{r}
full_ntl_data |> 
  filter(year >= 1984) |> 
  ggplot(aes(x = percent_collective_bargain)) +
  geom_point(aes(y = wage), color = "blue") +
  geom_point(aes(y = union_wage), color = "red") +
  facet_wrap(~decade) 
```


### 2.3.5 Collective Bargaining and House Elections

```{r}
full_state_data |> 
  filter(year >= 1984) |> 
  ggplot(aes(x = percent_collective_bargain, y = party_state_average)) +
  geom_point(color = "blue") +
  geom_smooth(method = "lm") +
  facet_wrap(~decade) 
```

### 2.3.6 Wages and House elections 


## Modeling

## Conclusion
